# Data Definition Language
데이터 관련 객체를 정의하고 삭제하는 문법

- 데이터베이스(database) = 스키마(schema)
- 테이블(table)
- 뷰(view)
- 트리거(trigger)
- 함수(function)
- 프로시저(procedure)
- 인덱스(index)

## 데이터 베이스
데이터베이스 생성
> create database 데이터베이스명
  옵션들...;

데이터베이스 삭제
> drop database 데이터베이스명;

데이터베이스 변경
> alter database 데이터베이스명 
  옵션들...;
  
## 테이블
테이블 생성
> create table 테이블명 (
  컬럼명 타입 NULL여부 옵션,
  컬럼명 타입 NULL여부 옵션 ,
  ...
  컬럼명 타입 NULL여부 옵션
  );

예) 
> create table score (
    name varchar(50) not null,
    kor int not null,
    eng int not null,
    math int not null,
    sum int not null,
    aver float not null
  );

테이블 정보 보기
> describe 테이블명;
> describe score;
> desc score; 

테이블 삭제하기
> drop table 테이블명;
> drop table score;

### 테이블 컬럼 옵션 

#### null 허용
데이터를 입력하지 않아도 된다.
> create table test1 (
  no int,
  name varchar(20)
  );
  
데이터 입력 테스트:
> insert into test1(no, name) values(1, 'aaa');
> insert into test1(no, name) values(null, 'bbb');
> insert into test1(no, name) values(3, null);
> insert into test1(no, name) values(null, null);
> select * from test1;

#### not null
데이터를 입력하지 않으면 실행 거절!
> create table test2(
    no int not null, 
    name varchar(20)
  );

데이터 입력 테스트:
> insert into test2(no, name) values(1, 'aaa');
> insert into test2(no, name) values(null, 'bbb'); /* 실행 오류 */
> insert into test2(no, name) values(3, null);

#### 기본값 지정하기
입력할 때 컬럼을 생략하면 지정된 기본값이 대신 입력된다.
> create table test3(
    no int not null,
    name varchar(20) default 'noname',
    age int default 20
  );

> insert into test3(no, name, age) values(1, 'aaa', 30);

값을 입력하지 않는 컬럼은 이름과 값 지정을 생략한다.
> insert into test3(name, age) values('aaa', 30); /* 오류! no는 not null*/
> insert into test3(no, age) values(3, 30);
> insert into test3(no, name) values(4, 'ddd');
> insert into test3(no) values(5);

### 컬럼 타입

#### int
- 4바이트 크기의 정수 값 저장
- 기타 tinyint(1), smallint(2), mediumint(3), bigint(8)

#### float
- 부동소수점 저장

#### numeric = decimal
- 전체 자릿수와 소수점 이하의 자릿수를 정밀하게 지정할 수 있다.
- numeric(n,e) : 전체 n 자릿수 중에서 소수점은 e 자릿수다.

입력 테스트:
> create table test4(
  c1 int, 
  c2 float, 
  c3 numeric(6,2),
  c4 numeric
  );
  
> insert into test4(c1) values(100);
> insert into test4(c1) values(3.14); /* 소수점 짤림 */
> insert into test4(c2) values(100);
> insert into test4(c2) values(3.14);
> insert into test4(c2) values(3.14159); 
> insert into test4(c3) values(100);
> insert into test4(c3) values(123456789); /* 입력 오류. 4자리 초과 */
> insert into test4(c3) values(12345); /* 입력 오류. 4자리 초과 */
> insert into test4(c3) values(1234);
> insert into test4(c3) values(3.14);
> insert into test4(c3) values(3.14159); /* 2자리를 초과한 값은 반올림. */
> insert into test4(c3) values(3.14659); /* 2자리를 초과한 값은 반올림. */
> insert into test4(c4) values(1234567890); 
> insert into test4(c4) values(12.34567890); /* 소수점은 반올림 처리됨 */
> insert into test4(c4) values(12345678.90); /* 소수점은 반올림 처리됨 */

#### char(n)
- 최대 n자의 문자를 저장.
- 0 <= n <= 255 
- 고정 크기를 갖는다. 
- 한 문자를 저장하더라도 5자를 저장할 크기를 사용한다.
- 크기가 고정되어서 검색할 때 빠르다.  

#### varchar(n)
- 최대 n자의 문자를 저장.
- 0 ~ 65535 바이트 크기를 갖는다.
- n 값은 문자집합에 따라 최대 값이 다르다.
- 만약 UTF-8로 지정된 경우 n은 최대 21845까지 지정할 수 있다.
- 가변 크기를 갖는다.
- 한 문자를 저장하면 한 문자 크기의 메모리를 차지한다.
- 크기가 가변적이라서 검색할 때 위치를 계산해야 하기 때문에 검색 시 느리다.

> create table test5(
  c1 char(5),
  c2 varchar(5),
  c3 varchar(21000) 
  );

입력 테스트:
> insert into test5(c1) values('');
> insert into test5(c1) values('abcde');
> insert into test5(c1) values('abcdefghi'); /* 입력 크기 초과 오류! */
> insert into test5(c1) values('가나다라마'); /* 한글 영어 상관없이 5자 */
> insert into test5(c2) values('');
> insert into test5(c2) values('abcde');
> insert into test5(c2) values('abcdefghi'); /* 입력 크기 초과 오류! */

#### text(65535), mediumtext(약 1.6MB), longtext(약 2GB)
- 긴 텍스트를 저장할 때 사용하는 컬럼 타입이다.

#### date
- 날짜 정보를 저장할 때 사용한다.
- 년,월,일 정보를 저장한다.

#### time
- 시간 정보를 저장할 때 사용한다.
- 시, 분, 초 정보를 저장한다.

#### datetime
- 날짜와 시간 정보를 함께 저장할 때 사용한다.

> create table test6(
  c1 date,
  c2 time,
  c3 datetime
  ); 

입력 테스터:
> insert into test6(c1) values('2017-11-21');
> insert into test6(c2) values('16:12:35');
> insert into test6(c3) values('2017-11-21 16:13:33');
> insert into test6(c1) values('2017-11-21 16:13:33'); /* 날짜 정보만 저장*/
> insert into test6(c2) values('2017-11-21 16:13:33'); /* 시간 정보만 저장*/

#### 불린 타입
- 보통 true, false를 의미하는 값을 저장할 때는 정수 1 또는 0으로 표현한다.
- 또는 문자로 Y 또는 N으로 표현하기도 한다.

> create table test7(
  c1 char(1),
  c2 int
  );


> insert into test7(c1) values('Y'); /* yes */
> insert into test7(c1) values('N'); /* no */
> insert into test7(c1) values('T'); /* true */
> insert into test7(c1) values('F'); /* false */
> insert into test7(c1) values('1'); /* true */
> insert into test7(c1) values('0'); /* false */
> insert into test7(c2) values(1); /* true */
> insert into test7(c2) values(0); /* false */


### 키 컬럼 지정 

#### primary key 
- 테이블의 데이터를 구분할 때 사용하는 컬럼들이다.
- 줄여서 PK라고 표시한다.
- PK 컬럼을 지정하지 않으면 데이터가 중복될 수 있다.

- PK를 지정하기 전:
> create table test8(
  name varchar(20),
  kor int,
  eng int,
  math int
  );

- 입력 테스트:
> insert into test8(name,kor,eng,math) values('aaa', 100, 100, 100);
> insert into test8(name,kor,eng,math) values('bbb', 90, 90, 90);
> insert into test8(name,kor,eng,math) values('aaa', 100, 100, 100); /* 중복*/

- PK를 지정한 후:
> 컬럼명 타입 primary key
> create table test9(
  name varchar(20) primary key,
  kor int,
  eng int,
  math int
  );

- 입력 테스트:
> insert into test9(name,kor,eng,math) values('aaa', 100, 100, 100);
> insert into test9(name,kor,eng,math) values('bbb', 90, 90, 90);
> insert into test9(name,kor,eng,math) values('aaa', 100, 100, 100); /* 중복*/


- 한 개 이상의 컬럼을 PK로 지정하기
> create table test10(
  name varchar(20) primary key,
  age int primary key,
  kor int,
  eng int,
  math int
  ); /* 실행 오류 */

- 각 컬럼에 대해서 개별적으로 PK를 지정해서는 안된다. 
- 여러 개의 컬럼을 묶어서 PK로 지정하려면 별도의 문법을 사용해야 한다.
> create table test10(
  name varchar(20),
  age int,
  kor int,
  eng int,
  math int,
  constraint primary key(name, age)
  );

- 입력 테스트:
> insert into test10(name, age, kor, eng, math) values('aa', 10, 100, 100, 100);
> insert into test10(name, age, kor, eng, math) values('bb', 20, 90, 90, 90);
> insert into test10(name, age, kor, eng, math) values('aa', 11, 88, 88, 88);
> insert into test10(name, age, kor, eng, math) values('ab', 11, 88, 88, 88);

/* 이름과 나이가 같으면 중복되기 때문에 입력 거절이다. */
> insert into test10(name, age, kor, eng, math) values('ab', 11, 88, 88, 88);

- 여러 개의 컬럼을 묶어서 PK로 사용하면 데이터를 다루기가 불편하다.
- 그래서 실무에서는 이런 경우 일련번호를 저장하는 임의의 컬럼을 만들어 PK로 사용한다.

> create table test11(
  no int primary key,
  name varchar(20),
  age int,
  kor int,
  eng int,
  math int
  );

> insert into test11(no,name,age,kor,eng,math) values(1,'a',10,90,90,90);
> insert into test11(no,name,age,kor,eng,math) values(2,'a',11,91,91,91);
> insert into test11(no,name,age,kor,eng,math) values(3,'b',11,81,81,81);
> insert into test11(no,name,age,kor,eng,math) values(4,'c',20,81,81,81);

/* 번호가 중복되었기 때문에 입력 거절 */
> insert into test11(no,name,age,kor,eng,math) values(4,'d',21,81,81,81);

/* 번호는 중복되지 않았지만, 값이 중복되는 경우를 막을 수 없다*/
> insert into test11(no,name,age,kor,eng,math) values(5,'c',20,81,81,81);

- 위와 같은 경우를 대비해 준비된 문법이 unique이다.
- PK는 아니지만 PK처럼 중복을 허락하지 않는 컬럼을 지정할 때 사용한다.
- 그래서 PK를 대신해서 사용할 수 있는 key라고 해서 "대안키"라고 부른다.

#### unique = alternate key(대안키)
> create table test12(
  no int primary key,
  name varchar(20),
  age int,
  kor int,
  eng int,
  math int,
  constraint unique (name, age)
  );

- 입력 테스트:
> insert into test12(no,name,age,kor,eng,math) values(1,'a',10,90,90,90);
> insert into test12(no,name,age,kor,eng,math) values(2,'a',11,91,91,91);
> insert into test12(no,name,age,kor,eng,math) values(3,'b',11,81,81,81);
> insert into test12(no,name,age,kor,eng,math) values(4,'c',20,81,81,81);

/* 번호가 중복되었기 때문에 입력 거절 */
> insert into test12(no,name,age,kor,eng,math) values(4,'d',21,81,81,81);

/* 비록 번호가 중복되지 않더라도 name, age가 unique 컬럼으로 지정되었기 
   때문에 중복저장될 수 없다.*/
> insert into test12(no,name,age,kor,eng,math) values(5,'c',20,81,81,81);


##### index
- 검색 조건으로 사용되는 컬럼은 정렬되어야만 데이터를 빨리 찾을 수 있다.
- 특정 컬럼의 값을 A-Z 또는 Z-A로 정렬시키는 문법이 인덱스이다.


















