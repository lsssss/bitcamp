<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
        

	<context:component-scan base-package="java100.app" >
	<context:exclude-filter type="aspectj" 
	expression="java100.app.web.*"/>
	</context:component-scan>


	<!-- mybatis의 SQL 실행 객체 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath*:java100/app/dao/mysql/*Dao.xml" />
		<property name="typeAliasesPackage" value="java100.app.domain" />
	</bean>


	<!-- DB 커넥션 풀 역할을 수행할 DataSource 객체 -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
	

	<context:property-placeholder location="classpath*:java100/app/jdbc.properties" />

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="java100.app.dao" />
	</bean>

	 <tx:advice id="txAdvice">
	    <tx:attributes>
	        <!-- 메서드명이 list로 시작하는 경우 트랜잭션 제외한다. -->
	        <tx:method name="list*" read-only="true"/>
	        
	        <!-- 게시글 조회인 경우 조회수를 변경해야 하기 때문에 
	             read-only로 만들어서는 안된다.  -->
	        <!--  
	        <tx:method name="get*" read-only="true"/>
	        -->
	        
	        <!-- 그 외 모든 메서드에 대해, 각 메서드 안에서 수행되는 모든 작업은
	             한 작업으로 묶인다. 
	             즉 같은 트랜잭션으로 다룬다. -->
	        <tx:method name="*"/>
	    </tx:attributes>
	</tx:advice>
    
    <!-- 트랜잭션 advice를 어떤 메서드에 적용할 것인지 지정한다. -->
    <aop:config>
    
        <!-- 트랜잭션 advice를 적용할 대상을 지정한다. -->
	    <aop:pointcut id="serviceOperation" 
	        expression="execution(* java100.app.service..*ServiceImpl.*(..))"/>
	    
	    <!-- 위에서 선언한 트랜잭션 advice를 pointcut에 연결한다. -->    
	    <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation"/>
	    
	</aop:config>
	

</beans>







